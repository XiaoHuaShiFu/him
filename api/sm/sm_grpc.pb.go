// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SmServiceClient is the client API for SmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmServiceClient interface {
	SendVecCodeForLogin(ctx context.Context, in *SendVecCodeForLoginReq, opts ...grpc.CallOption) (*SendVecCodeForLoginResp, error)
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error)
}

type smServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmServiceClient(cc grpc.ClientConnInterface) SmServiceClient {
	return &smServiceClient{cc}
}

func (c *smServiceClient) SendVecCodeForLogin(ctx context.Context, in *SendVecCodeForLoginReq, opts ...grpc.CallOption) (*SendVecCodeForLoginResp, error) {
	out := new(SendVecCodeForLoginResp)
	err := c.cc.Invoke(ctx, "/sm.SmService/SendVecCodeForLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smServiceClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, "/sm.SmService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmServiceServer is the server API for SmService service.
// All implementations must embed UnimplementedSmServiceServer
// for forward compatibility
type SmServiceServer interface {
	SendVecCodeForLogin(context.Context, *SendVecCodeForLoginReq) (*SendVecCodeForLoginResp, error)
	Send(context.Context, *SendReq) (*SendResp, error)
	mustEmbedUnimplementedSmServiceServer()
}

// UnimplementedSmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmServiceServer struct {
}

func (UnimplementedSmServiceServer) SendVecCodeForLogin(context.Context, *SendVecCodeForLoginReq) (*SendVecCodeForLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVecCodeForLogin not implemented")
}
func (UnimplementedSmServiceServer) Send(context.Context, *SendReq) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSmServiceServer) mustEmbedUnimplementedSmServiceServer() {}

// UnsafeSmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmServiceServer will
// result in compilation errors.
type UnsafeSmServiceServer interface {
	mustEmbedUnimplementedSmServiceServer()
}

func RegisterSmServiceServer(s grpc.ServiceRegistrar, srv SmServiceServer) {
	s.RegisterService(&SmService_ServiceDesc, srv)
}

func _SmService_SendVecCodeForLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVecCodeForLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmServiceServer).SendVecCodeForLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sm.SmService/SendVecCodeForLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmServiceServer).SendVecCodeForLogin(ctx, req.(*SendVecCodeForLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sm.SmService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmServiceServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SmService_ServiceDesc is the grpc.ServiceDesc for SmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sm.SmService",
	HandlerType: (*SmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVecCodeForLogin",
			Handler:    _SmService_SendVecCodeForLogin_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _SmService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sm/sm.proto",
}
