syntax = "proto3";

package msg;

import "api/constant/constant.proto";

option go_package = "github.com/xiaohuashifu/him/api/msg";

// ------------------------- 基础资源

// 图片
message Image {
    string url = 1; // 地址
    uint32 width = 2; // 宽
    uint32 height = 3; // 高
    // 图片类型
    enum Format {
        FORMAT_UNSPECIFIED = 0; // 未知
        FORMAT_JPG = 1; // JPG格式
        FORMAT_PNG = 2; // PNG格式
    }
    Format format = 4; // 图片类型
    uint32 size = 5; // 大小，单位B
}

// 语音
message Voice {
    string url = 1; // 地址
    uint32 duration = 2; // 时长，单位秒
    // 语音类型
    enum Format {
        FORMAT_UNSPECIFIED = 0; // 未知
        FORMAT_MP3 = 1; // MP3格式
    }
    Format format = 3; // 语音类型
    uint32 size = 4; // 大小，单位B
}

// 视频
message Video {
    string url = 1; // 地址
    uint32 duration = 2; // 时长，单位秒
    // 视频类型
    enum Format {
        FORMAT_UNSPECIFIED = 0; // 未知
        FORMAT_MP4 = 1; // MP4格式
    }
    Format format = 3; // 视频类型
    uint32 size = 4; // 大小，单位B
}

// 文件
message File {
    string url = 1; // 地址
    string name = 2; // 文件名
    // 文件类型
    enum Format {
        FORMAT_UNSPECIFIED = 0; // 未知
        FORMAT_PDF = 1; // PDF格式
    }
    Format format = 3; // 文件类型
    uint32 size = 4; // 大小，单位B
}

// ----------------------------- 消息，这些是会被存储的

// 消息，消息会持久化存储
// 通过客户端信箱编号同步机制，保证消息可靠性，同时客户端需要保证消息被成功处理
// 消息通过事件推送给客户端
message Msg {
    uint64 user_id = 1; // 信箱拥有者用户编号
    uint64 mail_box_msg_id = 2; // 信箱里消息编号，每个人一个信箱，信箱里消息编号会递增（保证不丢失消息）
    uint64 msg_id = 3; // 消息编号，全局唯一，根据到达服务器时间生成，可以用户消息排序（保证有序性）
    Sender sender = 4; // 发送者
    Receiver receiver = 5; // 接收者
    uint64 send_time = 6; // 发送时间
    uint64 arrival_time = 7; // 到达服务器时间
    // 发送者的一个终端的一个请求的唯一标识
    // （避免消息重复，比如消息发送成功，但是用户没有收到响应（断网），
    // 再回来的时候同步消息，通过CorrelationID就可以把发送失败的消息设置为发送成功）
    // 唯一标识可以是 UUID_IncrementID
    string correlation_id = 8;
    // 消息内容
    oneof content {
        TextMsg text_msg = 9;
        ImageMsg image_msg = 10;
        VoiceMsg voice_msg = 11;
        VideoMsg video_msg = 12;
        FileMsg file_msg = 13;
        WithdrawMsg withdraw_msg = 14;
        TipMsg tip_msg = 15;
        EventMsg event_msg = 16;

        // todo
        // 合并消息 转发消息 位置消息
    }
}

// 接收者
message Receiver {
    // 接收者类型
    enum Type {
        TYPE_UNSPECIFIED = 0; // 未知
        TYPE_USER = 1; // 用户
        TYPE_GROUP = 2; // 群
    }
    Type type = 1; // 接收者类型
    uint64 receiver_id = 2; // 接收者编号
}

// 发送者
message Sender {
    // 发送者类型
    enum Type {
        TYPE_UNSPECIFIED = 0; // 未知
        TYPE_USER = 1; // 用户
        TYPE_SYS = 2; // 系统
    }
    Type type = 1; // 发送者类型
    uint64 sender_id = 2; // 发送者编号
    constant.Terminal sender_terminal = 3; // 发送者终端
}

// 文本消息
message TextMsg {
    string content = 1; // 文本消息内容
    bool is_at_all = 2; // 是否@所有人
    bool is_notice = 3; // 是否群公告
    repeated string at_user_ids = 4; // 被@的用户
    uint64 quoted_msg_id = 5; // 被引用消息编号
}

// 图片消息
message ImageMsg {
    msg.Image thumbnail = 1; // 缩略图
    msg.Image original_image = 2; // 原图
}

// 语音消息
message VoiceMsg {
    msg.Voice voice = 1; // 语音
}

// 视频消息
message VideoMsg {
    msg.Image thumbnail = 1; // 缩略图
    msg.Video video = 2; // 视频
}

// 文件消息
message FileMsg {
    msg.File file = 1; // 文件
}

// 撤回消息
message WithdrawMsg {
    uint64 msg_id = 1; // 被撤回消息的编号
}

// 提示消息
message TipMsg {
    // 文本提示
    message TextTip {
        string content = 1; // 提示内容
    }
    // 昵称文本提示
    message NickNameTextTip {
        string format = 1; // 格式字符串
        // 昵称文本
        message NickNameText {
            uint64 user_id = 1; // 用户编号
            string nick_name = 2; // 昵称
        }
        repeated NickNameText nick_name_texts = 2; // 昵称文本
    }
    // 提示内容
    oneof content {
        TextTip text_tip = 1;
        NickNameTextTip nick_name_text_tip = 2;
    }
}

// 事件消息
// 事件消息用于需要保证客户端能够收到的事件
// 本质上是消息，但是一般不用于展示，只用于通知
message EventMsg {
    // 新的好友事件消息（你已添加了xx，现在可以开始聊天了tip）
    message NewFriend {
        uint64 friend_id = 1; // 用户编号
    }
    // 好友信息改变事件消息
    message FriendInfoChange {
        uint64 friend_id = 1; // 用户编号
    }
    // 删除好友事件消息（对方删除了你tip）
    message DeleteFriend {
        uint64 friend_id = 1; // 用户编号
    }
    // 新的添加好友申请事件消息
    message NewAddFriendApplication {
        uint64 add_friend_application_id = 1; // 好友申请编号
    }
    // 添加好友申请状态改变事件消息
    message AddFriendApplicationStatusChange {
        uint64 add_friend_application_id = 1; // 状态改变的添加好友申请编号
    }

    // 新的群事件消息（xx邀请xx，xxx，xxx等加入了群聊tip，你通过扫描xx分享的二维码加入群聊tip，xx邀请你加入了群聊tip）
    message NewGroup {
        uint64 group_id = 1; // 群编号
    }
    // 群信息改变事件消息（头像、群名、群公告，xx修改群名为xx tip）
    message GroupInfoChange {
        uint64 group_id = 1; // 群编号
    }
    // 群成员信息改变事件消息（直接拉群群成员信息列表和本地比较进行同步）
       // 群成员信息更改（换群主，管理员变动，xx成为了新的群主tip，xx成为了新的管理员）
    // 群成员加入（加入，邀请加入，xx通过扫描xx分析的二维码进群tip，xx邀请xx，xx，xx加入了群聊tip）
    // 群成员退出（退出，被踢，xx退出了群聊tip，xx被踢出群聊tip）
    message GroupMemberInfoChange {
        uint64 group_id = 1; // 群编号
    }
    // 新的入群事件事件消息
    message NewJoinGroupEvent {
        uint64 join_group_event_id = 1; // 入群事件编号
    }
    // 入群事件改变事件消息
    message JoinGroupEventChange {
        uint64 join_group_event_id = 1; // 入群事件编号
    }

    // 事件消息内容
    oneof content {
        NewFriend new_friend = 1;
        FriendInfoChange friend_info_change = 2;
        DeleteFriend delete_friend = 3;
        NewAddFriendApplication new_add_friend_application = 4;
        AddFriendApplicationStatusChange add_friend_application_status_change = 5;

        NewGroup new_group = 6;
        GroupInfoChange group_info_change = 7;
        GroupMemberInfoChange group_member_info_change = 8;
        NewJoinGroupEvent new_join_group_event = 9;
        JoinGroupEventChange join_group_event_change = 10;
    }
}

// ----------------------------- 存储模型

// @存储模型
// 信箱消息
// 每个消息都会转换成信箱消息进行存储
message MailBoxMsg {
    Msg msg = 1; // 消息
}