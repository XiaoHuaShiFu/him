// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package long

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgLongServiceClient is the client API for MsgLongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgLongServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
}

type msgLongServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgLongServiceClient(cc grpc.ClientConnInterface) MsgLongServiceClient {
	return &msgLongServiceClient{cc}
}

func (c *msgLongServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/msg.long.MsgLongService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgLongServiceClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/msg.long.MsgLongService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgLongServiceServer is the server API for MsgLongService service.
// All implementations must embed UnimplementedMsgLongServiceServer
// for forward compatibility
type MsgLongServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	mustEmbedUnimplementedMsgLongServiceServer()
}

// UnimplementedMsgLongServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgLongServiceServer struct {
}

func (UnimplementedMsgLongServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMsgLongServiceServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedMsgLongServiceServer) mustEmbedUnimplementedMsgLongServiceServer() {}

// UnsafeMsgLongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgLongServiceServer will
// result in compilation errors.
type UnsafeMsgLongServiceServer interface {
	mustEmbedUnimplementedMsgLongServiceServer()
}

func RegisterMsgLongServiceServer(s grpc.ServiceRegistrar, srv MsgLongServiceServer) {
	s.RegisterService(&MsgLongService_ServiceDesc, srv)
}

func _MsgLongService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLongServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.long.MsgLongService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLongServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgLongService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLongServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.long.MsgLongService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLongServiceServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgLongService_ServiceDesc is the grpc.ServiceDesc for MsgLongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgLongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.long.MsgLongService",
	HandlerType: (*MsgLongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MsgLongService_Login_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _MsgLongService_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msg/long/long.proto",
}
