// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*UpdateGroupInfoResp, error)
	GetGroupInfos(ctx context.Context, in *GetGroupInfosReq, opts ...grpc.CallOption) (*GetGroupInfosResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
	TransferGroupLeader(ctx context.Context, in *TransferGroupLeaderReq, opts ...grpc.CallOption) (*TransferGroupLeaderResp, error)
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error)
	GetGroupMemberInfos(ctx context.Context, in *GetGroupMemberInfosReq, opts ...grpc.CallOption) (*GetGroupMemberInfosResp, error)
	CreateJoinGroupEvent(ctx context.Context, in *CreateJoinGroupEventReq, opts ...grpc.CallOption) (*CreateJoinGroupEventResp, error)
	GetJoinGroupEvents(ctx context.Context, in *GetJoinGroupEventsReq, opts ...grpc.CallOption) (*GetJoinGroupEventsResp, error)
	UpdateJoinGroupEvent(ctx context.Context, in *UpdateJoinGroupEventReq, opts ...grpc.CallOption) (*UpdateJoinGroupEventResp, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*UpdateGroupInfoResp, error) {
	out := new(UpdateGroupInfoResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/UpdateGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupInfos(ctx context.Context, in *GetGroupInfosReq, opts ...grpc.CallOption) (*GetGroupInfosResp, error) {
	out := new(GetGroupInfosResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/GetGroupInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	out := new(KickGroupMemberResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/KickGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) TransferGroupLeader(ctx context.Context, in *TransferGroupLeaderReq, opts ...grpc.CallOption) (*TransferGroupLeaderResp, error) {
	out := new(TransferGroupLeaderResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/TransferGroupLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error) {
	out := new(QuitGroupResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/QuitGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupMemberInfos(ctx context.Context, in *GetGroupMemberInfosReq, opts ...grpc.CallOption) (*GetGroupMemberInfosResp, error) {
	out := new(GetGroupMemberInfosResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/GetGroupMemberInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) CreateJoinGroupEvent(ctx context.Context, in *CreateJoinGroupEventReq, opts ...grpc.CallOption) (*CreateJoinGroupEventResp, error) {
	out := new(CreateJoinGroupEventResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/CreateJoinGroupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetJoinGroupEvents(ctx context.Context, in *GetJoinGroupEventsReq, opts ...grpc.CallOption) (*GetJoinGroupEventsResp, error) {
	out := new(GetJoinGroupEventsResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/GetJoinGroupEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) UpdateJoinGroupEvent(ctx context.Context, in *UpdateJoinGroupEventReq, opts ...grpc.CallOption) (*UpdateJoinGroupEventResp, error) {
	out := new(UpdateJoinGroupEventResp)
	err := c.cc.Invoke(ctx, "/grp.GroupService/UpdateJoinGroupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*UpdateGroupInfoResp, error)
	GetGroupInfos(context.Context, *GetGroupInfosReq) (*GetGroupInfosResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error)
	TransferGroupLeader(context.Context, *TransferGroupLeaderReq) (*TransferGroupLeaderResp, error)
	QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error)
	GetGroupMemberInfos(context.Context, *GetGroupMemberInfosReq) (*GetGroupMemberInfosResp, error)
	CreateJoinGroupEvent(context.Context, *CreateJoinGroupEventReq) (*CreateJoinGroupEventResp, error)
	GetJoinGroupEvents(context.Context, *GetJoinGroupEventsReq) (*GetJoinGroupEventsResp, error)
	UpdateJoinGroupEvent(context.Context, *UpdateJoinGroupEventReq) (*UpdateJoinGroupEventResp, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*UpdateGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupInfos(context.Context, *GetGroupInfosReq) (*GetGroupInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfos not implemented")
}
func (UnimplementedGroupServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServiceServer) KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGroupMember not implemented")
}
func (UnimplementedGroupServiceServer) TransferGroupLeader(context.Context, *TransferGroupLeaderReq) (*TransferGroupLeaderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroupLeader not implemented")
}
func (UnimplementedGroupServiceServer) QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupMemberInfos(context.Context, *GetGroupMemberInfosReq) (*GetGroupMemberInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberInfos not implemented")
}
func (UnimplementedGroupServiceServer) CreateJoinGroupEvent(context.Context, *CreateJoinGroupEventReq) (*CreateJoinGroupEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJoinGroupEvent not implemented")
}
func (UnimplementedGroupServiceServer) GetJoinGroupEvents(context.Context, *GetJoinGroupEventsReq) (*GetJoinGroupEventsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinGroupEvents not implemented")
}
func (UnimplementedGroupServiceServer) UpdateJoinGroupEvent(context.Context, *UpdateJoinGroupEventReq) (*UpdateJoinGroupEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJoinGroupEvent not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/UpdateGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/GetGroupInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupInfos(ctx, req.(*GetGroupInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/KickGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_TransferGroupLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupLeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).TransferGroupLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/TransferGroupLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).TransferGroupLeader(ctx, req.(*TransferGroupLeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/QuitGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).QuitGroup(ctx, req.(*QuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupMemberInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupMemberInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/GetGroupMemberInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupMemberInfos(ctx, req.(*GetGroupMemberInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_CreateJoinGroupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJoinGroupEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).CreateJoinGroupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/CreateJoinGroupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).CreateJoinGroupEvent(ctx, req.(*CreateJoinGroupEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetJoinGroupEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinGroupEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetJoinGroupEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/GetJoinGroupEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetJoinGroupEvents(ctx, req.(*GetJoinGroupEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_UpdateJoinGroupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJoinGroupEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).UpdateJoinGroupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grp.GroupService/UpdateJoinGroupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).UpdateJoinGroupEvent(ctx, req.(*UpdateJoinGroupEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grp.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _GroupService_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupInfos",
			Handler:    _GroupService_GetGroupInfos_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _GroupService_CreateGroup_Handler,
		},
		{
			MethodName: "KickGroupMember",
			Handler:    _GroupService_KickGroupMember_Handler,
		},
		{
			MethodName: "TransferGroupLeader",
			Handler:    _GroupService_TransferGroupLeader_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _GroupService_QuitGroup_Handler,
		},
		{
			MethodName: "GetGroupMemberInfos",
			Handler:    _GroupService_GetGroupMemberInfos_Handler,
		},
		{
			MethodName: "CreateJoinGroupEvent",
			Handler:    _GroupService_CreateJoinGroupEvent_Handler,
		},
		{
			MethodName: "GetJoinGroupEvents",
			Handler:    _GroupService_GetJoinGroupEvents_Handler,
		},
		{
			MethodName: "UpdateJoinGroupEvent",
			Handler:    _GroupService_UpdateJoinGroupEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grp/grp.proto",
}
