// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package friend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	GetFriendInfos(ctx context.Context, in *GetFriendInfosReq, opts ...grpc.CallOption) (*GetFriendInfosResp, error)
	UpdateFriendInfo(ctx context.Context, in *UpdateFriendInfoReq, opts ...grpc.CallOption) (*UpdateFriendInfoResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	GetAddFriendApplications(ctx context.Context, in *GetAddFriendApplicationsReq, opts ...grpc.CallOption) (*GetAddFriendApplicationsResp, error)
	AddFriendApplication(ctx context.Context, in *AddFriendApplicationReq, opts ...grpc.CallOption) (*AddFriendApplicationResp, error)
	UpdateAddFriendApplication(ctx context.Context, in *UpdateAddFriendApplicationReq, opts ...grpc.CallOption) (*UpdateAddFriendApplicationResp, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) GetFriendInfos(ctx context.Context, in *GetFriendInfosReq, opts ...grpc.CallOption) (*GetFriendInfosResp, error) {
	out := new(GetFriendInfosResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/GetFriendInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) UpdateFriendInfo(ctx context.Context, in *UpdateFriendInfoReq, opts ...grpc.CallOption) (*UpdateFriendInfoResp, error) {
	out := new(UpdateFriendInfoResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/UpdateFriendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetAddFriendApplications(ctx context.Context, in *GetAddFriendApplicationsReq, opts ...grpc.CallOption) (*GetAddFriendApplicationsResp, error) {
	out := new(GetAddFriendApplicationsResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/GetAddFriendApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) AddFriendApplication(ctx context.Context, in *AddFriendApplicationReq, opts ...grpc.CallOption) (*AddFriendApplicationResp, error) {
	out := new(AddFriendApplicationResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/AddFriendApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) UpdateAddFriendApplication(ctx context.Context, in *UpdateAddFriendApplicationReq, opts ...grpc.CallOption) (*UpdateAddFriendApplicationResp, error) {
	out := new(UpdateAddFriendApplicationResp)
	err := c.cc.Invoke(ctx, "/friend.FriendService/UpdateAddFriendApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility
type FriendServiceServer interface {
	GetFriendInfos(context.Context, *GetFriendInfosReq) (*GetFriendInfosResp, error)
	UpdateFriendInfo(context.Context, *UpdateFriendInfoReq) (*UpdateFriendInfoResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	GetAddFriendApplications(context.Context, *GetAddFriendApplicationsReq) (*GetAddFriendApplicationsResp, error)
	AddFriendApplication(context.Context, *AddFriendApplicationReq) (*AddFriendApplicationResp, error)
	UpdateAddFriendApplication(context.Context, *UpdateAddFriendApplicationReq) (*UpdateAddFriendApplicationResp, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServiceServer struct {
}

func (UnimplementedFriendServiceServer) GetFriendInfos(context.Context, *GetFriendInfosReq) (*GetFriendInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInfos not implemented")
}
func (UnimplementedFriendServiceServer) UpdateFriendInfo(context.Context, *UpdateFriendInfoReq) (*UpdateFriendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendInfo not implemented")
}
func (UnimplementedFriendServiceServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServiceServer) GetAddFriendApplications(context.Context, *GetAddFriendApplicationsReq) (*GetAddFriendApplicationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddFriendApplications not implemented")
}
func (UnimplementedFriendServiceServer) AddFriendApplication(context.Context, *AddFriendApplicationReq) (*AddFriendApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriendApplication not implemented")
}
func (UnimplementedFriendServiceServer) UpdateAddFriendApplication(context.Context, *UpdateAddFriendApplicationReq) (*UpdateAddFriendApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddFriendApplication not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_GetFriendInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetFriendInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/GetFriendInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetFriendInfos(ctx, req.(*GetFriendInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_UpdateFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).UpdateFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/UpdateFriendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).UpdateFriendInfo(ctx, req.(*UpdateFriendInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetAddFriendApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddFriendApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).GetAddFriendApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/GetAddFriendApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).GetAddFriendApplications(ctx, req.(*GetAddFriendApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_AddFriendApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AddFriendApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/AddFriendApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AddFriendApplication(ctx, req.(*AddFriendApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_UpdateAddFriendApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddFriendApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).UpdateAddFriendApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/UpdateAddFriendApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).UpdateAddFriendApplication(ctx, req.(*UpdateAddFriendApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendInfos",
			Handler:    _FriendService_GetFriendInfos_Handler,
		},
		{
			MethodName: "UpdateFriendInfo",
			Handler:    _FriendService_UpdateFriendInfo_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _FriendService_DeleteFriend_Handler,
		},
		{
			MethodName: "GetAddFriendApplications",
			Handler:    _FriendService_GetAddFriendApplications_Handler,
		},
		{
			MethodName: "AddFriendApplication",
			Handler:    _FriendService_AddFriendApplication_Handler,
		},
		{
			MethodName: "UpdateAddFriendApplication",
			Handler:    _FriendService_UpdateAddFriendApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/friend/friend.proto",
}
